#!/usr/bin/env python3
"""
Test ph√¢n bi·ªát 2 n√∫t Xong kh√°c nhau:
1. N√∫t Xong trong ph·∫ßn nh·∫≠p email (b∆∞·ªõc 3)
2. N√∫t Xong trong popup Ch·∫ø ƒë·ªô hi·ªÉn th·ªã (b∆∞·ªõc 4)
"""

import os
import sys
sys.path.append('src')

from dotenv import load_dotenv
from playwright.sync_api import sync_playwright
from src.agent.youtube_share_agent import (
    find_done_button_email_section,
    find_done_button_popup,
    find_and_fill_email_field
)

# Load bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()

PROFILE_PATH = os.getenv("BROWSER_USER_DATA", "")

def test_two_done_buttons():
    """Test ph√¢n bi·ªát 2 n√∫t Xong"""
    
    if not os.path.exists(PROFILE_PATH):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y profile: {PROFILE_PATH}")
        return
    
    print(f"‚úÖ S·ª≠ d·ª•ng profile: {PROFILE_PATH}")
    
    with sync_playwright() as p:
        browser = p.chromium.launch_persistent_context(
            user_data_dir=PROFILE_PATH,
            headless=False,
            args=[
                '--disable-blink-features=AutomationControlled',
                '--disable-web-security',
                '--no-sandbox',
                '--window-size=1280,800',
            ]
        )
        page = browser.new_page()
        
        # Test v·ªõi video ID m·∫´u
        video_id = input("Nh·∫≠p video ID ƒë·ªÉ test: ")
        if not video_id:
            print("‚ùå Kh√¥ng c√≥ video ID")
            browser.close()
            return
        
        # Truy c·∫≠p trang edit video
        print(f"üåê Truy c·∫≠p: https://studio.youtube.com/video/{video_id}/edit")
        page.goto(f"https://studio.youtube.com/video/{video_id}/edit")
        page.wait_for_timeout(5000)
        
        # Ch·ªù trang load
        page.wait_for_load_state("networkidle")
        
        print("\n" + "="*50)
        print("üîç TEST PH√ÇN BI·ªÜT 2 N√öT XONG")
        print("="*50)
        
        # Test nh·∫≠p email
        test_email = input("Nh·∫≠p email ƒë·ªÉ test (ho·∫∑c Enter ƒë·ªÉ d√πng test@example.com): ")
        if not test_email:
            test_email = "test@example.com"
        
        print(f"\nüîç Test nh·∫≠p email: {test_email}")
        
        # Test 1: Nh·∫≠p email
        print("\n--- Test 1: Nh·∫≠p email ---")
        if find_and_fill_email_field(page, test_email):
            print("‚úÖ Test 1 PASSED: Nh·∫≠p email th√†nh c√¥ng")
        else:
            print("‚ùå Test 1 FAILED: Kh√¥ng th·ªÉ nh·∫≠p email")
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
        
        # Ch·ªù UI c·∫≠p nh·∫≠t
        print("\n‚è≥ Ch·ªù UI c·∫≠p nh·∫≠t...")
        page.wait_for_timeout(3000)
        
        # Test 2: T√¨m n√∫t Xong trong ph·∫ßn email (b∆∞·ªõc 3)
        print("\n--- Test 2: N√∫t Xong trong ph·∫ßn email (b∆∞·ªõc 3) ---")
        if find_done_button_email_section(page):
            print("‚úÖ Test 2 PASSED: Click n√∫t Xong email th√†nh c√¥ng")
        else:
            print("‚ùå Test 2 FAILED: Kh√¥ng t√¨m th·∫•y n√∫t Xong email")
        
        # Ch·ªù popup xu·∫•t hi·ªán
        print("\n‚è≥ Ch·ªù popup xu·∫•t hi·ªán...")
        page.wait_for_timeout(3000)
        
        # Test 3: T√¨m n√∫t Xong trong popup (b∆∞·ªõc 4)
        print("\n--- Test 3: N√∫t Xong trong popup (b∆∞·ªõc 4) ---")
        if find_done_button_popup(page):
            print("‚úÖ Test 3 PASSED: Click n√∫t Xong popup th√†nh c√¥ng")
        else:
            print("‚ùå Test 3 FAILED: Kh√¥ng t√¨m th·∫•y n√∫t Xong popup")
        
        # Test 4: Debug th√¥ng tin t·∫•t c·∫£ n√∫t Xong
        print("\n--- Test 4: Debug t·∫•t c·∫£ n√∫t Xong ---")
        result = page.evaluate("""
            () => {
                const keywords = ['xong', 'done', 'ok', 'confirm', 'apply'];
                const buttons = document.querySelectorAll('button, [role="button"], ytcp-button');
                const foundButtons = [];
                
                for (let btn of buttons) {
                    if (btn.offsetParent !== null) {
                        const text = (btn.textContent || btn.innerText || '').toLowerCase();
                        const ariaLabel = (btn.getAttribute('aria-label') || '').toLowerCase();
                        const className = (btn.getAttribute('class') || '').toLowerCase();
                        const disabled = btn.disabled;
                        
                        for (let keyword of keywords) {
                            if (text.includes(keyword) || ariaLabel.includes(keyword)) {
                                // Ki·ªÉm tra v·ªã tr√≠ v√† context
                                let context = 'unknown';
                                let emailInputNearby = false;
                                
                                // T√¨m input field g·∫ßn nh·∫•t
                                const emailInputs = document.querySelectorAll('input[type="email"], input[type="text"], textarea, [contenteditable="true"]');
                                for (let input of emailInputs) {
                                    if (input.offsetParent !== null) {
                                        const rect1 = btn.getBoundingClientRect();
                                        const rect2 = input.getBoundingClientRect();
                                        const distance = Math.sqrt(
                                            Math.pow(rect1.left - rect2.left, 2) + 
                                            Math.pow(rect1.top - rect2.top, 2)
                                        );
                                        
                                        if (distance < 500) {
                                            emailInputNearby = true;
                                            context = 'email_section';
                                            break;
                                        }
                                    }
                                }
                                
                                // Ki·ªÉm tra c√≥ trong popup kh√¥ng
                                if (!emailInputNearby) {
                                    let parent = btn.parentElement;
                                    while (parent) {
                                        const parentClass = parent.getAttribute('class') || '';
                                        const parentRole = parent.getAttribute('role') || '';
                                        
                                        if (parentClass.includes('dialog') || parentClass.includes('modal') || 
                                            parentClass.includes('popup') || parentRole === 'dialog') {
                                            context = 'popup';
                                            break;
                                        }
                                        parent = parent.parentElement;
                                    }
                                }
                                
                                foundButtons.push({
                                    text: btn.textContent || btn.innerText || '',
                                    ariaLabel: btn.getAttribute('aria-label') || '',
                                    className: className,
                                    disabled: disabled,
                                    context: context,
                                    emailInputNearby: emailInputNearby,
                                    tagName: btn.tagName,
                                    id: btn.getAttribute('id') || '',
                                    rect: {
                                        left: btn.getBoundingClientRect().left,
                                        top: btn.getBoundingClientRect().top
                                    }
                                });
                                break;
                            }
                        }
                    }
                }
                
                return foundButtons;
            }
        """)
        
        if result:
            print(f"üîç T√¨m th·∫•y {len(result)} n√∫t Xong:")
            for i, btn in enumerate(result):
                status = "enabled" if not btn.get('disabled') else "disabled"
                context = btn.get('context', 'unknown')
                nearby = "g·∫ßn email" if btn.get('emailInputNearby') else "kh√¥ng g·∫ßn email"
                print(f"   {i+1}. Text: '{btn.get('text')}' | Status: {status}")
                print(f"      Context: {context} | {nearby}")
                print(f"      Class: {btn.get('className')}")
                print(f"      Tag: {btn.get('tagName')} | ID: {btn.get('id')}")
                print(f"      Position: ({btn.get('rect', {}).get('left', 0)}, {btn.get('rect', {}).get('top', 0)})")
        else:
            print("‚ùå Kh√¥ng t√¨m th·∫•y n√∫t Xong n√†o")
        
        print("\n" + "="*50)
        print("‚úÖ HO√ÄN TH√ÄNH TEST PH√ÇN BI·ªÜT 2 N√öT XONG")
        print("="*50)
        
        input("Nh·∫•n Enter ƒë·ªÉ ƒë√≥ng browser...")
        browser.close()

if __name__ == "__main__":
    test_two_done_buttons() 